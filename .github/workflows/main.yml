name: NUBER_EATS_BACKEND_CI_CD

on:
  push:
    branches: ['main']

  pull_request:
    branches: ['main']

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test
        ports:
          - 5432:5432
    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v4

      - name: Setup node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Generate Environment Variables File for Test
        run: |
          touch .test.env
          echo "DB_HOST=$DB_HOST" >> .test.env
          echo "DB_NAME=$DB_NAME" >> .test.env
          echo "DB_PASSWORD=$DB_PASSWORD" >> .test.env
          echo "DB_PORT=$DB_PORT" >> .test.env
          echo "DB_USERNAME=$DB_USERNAME" >> .test.env
          echo "MAILGUN_API_KEY=$MAILGUN_API_KEY" >> .test.env
          echo "MAILGUN_DOMAIN_NAME=$MAILGUN_DOMAIN_NAME" >> .test.env
          echo "MAILGUN_FROM_EMAIL=$MAILGUN_FROM_EMAIL" >> .test.env
          echo "JWT_PRIVATE_KEY=$PRIVATE_KEY" >> .test.env
          echo "AWS_ACCESS_KEY=$AWS_ACCESS_KEY" >> .test.env
          echo "AWS_SECRET_ACESS_KEY=$AWS_SECRET_ACESS_KEY" >> .test.env
          cat .test.env
        working-directory: ${{ github.workspace }}
        env:
          DB_HOST: 'localhost'
          DB_NAME: 'postgres'
          DB_PASSWORD: 'postgres'
          DB_PORT: 5432
          DB_USERNAME: 'postgres'
          MAILGUN_API_KEY: ${{ secrets.MAILGUN_API_KEY }}
          MAILGUN_DOMAIN_NAME: ${{ secrets.MAILGUN_DOMAIN_NAME }}
          MAILGUN_FROM_EMAIL: ${{ secrets.MAILGUN_FROM_EMAIL }}
          PRIVATE_KEY: '1111'
          AWS_ACCESS_KEY: '1111'
          AWS_SECRET_ACESS_KEY: '1111'

      - run: npm install
      - run: npm run test:cov
      - run: npm run test:e2e

  deploy:
    needs: test
    runs-on: ubuntu-latest
    outputs:
      output1: ${{steps.build-image.outputs.image}}
    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v4

      - name: Generate Environment Variables File for Production
        run: |
          touch .prod.env
          echo "DB_HOST=$DB_HOST" >> .prod.env
          echo "DB_NAME=$DB_NAME" >> .prod.env
          echo "DB_PASSWORD=$DB_PASSWORD" >> .prod.env
          echo "DB_PORT=$DB_PORT" >> .prod.env
          echo "DB_USERNAME=$DB_USERNAME" >> .prod.env
          echo "MAILGUN_API_KEY=$MAILGUN_API_KEY" >> .prod.env
          echo "MAILGUN_DOMAIN_NAME=$MAILGUN_DOMAIN_NAME" >> .prod.env
          echo "MAILGUN_FROM_EMAIL=$MAILGUN_FROM_EMAIL" >> .prod.env
          echo "JWT_PRIVATE_KEY=$PRIVATE_KEY" >> .prod.env
          echo "AWS_ACCESS_KEY=$AWS_ACCESS_KEY" >> .prod.env
          echo "AWS_SECRET_ACESS_KEY=$AWS_SECRET_ACESS_KEY" >> .prod.env
          cat .prod.env
        working-directory: ${{ github.workspace }}
        env:
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_PORT: ${{ secrets.DB_PORT }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          MAILGUN_API_KEY: ${{ secrets.MAILGUN_API_KEY }}
          MAILGUN_DOMAIN_NAME: ${{ secrets.MAILGUN_DOMAIN_NAME }}
          MAILGUN_FROM_EMAIL: ${{ secrets.MAILGUN_FROM_EMAIL }}
          PRIVATE_KEY: ${{ secrets.JWT_PRIVATE_KEY }}
          AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: 'ap-northeast-2'

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: 'nuber-eats'
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition nuber-eats-application --query taskDefinition > task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: 'task-definition.json'
          container-name: 'nuber-eats-container'
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: 'nuber-eats-service'
          cluster: 'nuber-eats-cluster'
          wait-for-service-stability: true
